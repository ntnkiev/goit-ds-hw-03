Index: ../raspberry/pyproject.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../raspberry/pyproject.toml b/../raspberry/pyproject.toml
new file mode 100644
--- /dev/null	(date 1711325894381)
+++ b/../raspberry/pyproject.toml	(date 1711325894381)
@@ -0,0 +1,16 @@
+[tool.poetry]
+name = "raspberry"
+version = "0.1.0"
+description = ""
+authors = ["ntnkiev <ntn.kiev@gmail.com>"]
+readme = "README.md"
+
+[tool.poetry.dependencies]
+python = "^3.12"
+serial = "^0.0.97"
+pyserial = "^3.5"
+
+
+[build-system]
+requires = ["poetry-core"]
+build-backend = "poetry.core.masonry.api"
Index: ../goit-ds-hw-02-2/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../goit-ds-hw-02-2/.idea/.gitignore b/../goit-ds-hw-02-2/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1710962053535)
+++ b/../goit-ds-hw-02-2/.idea/.gitignore	(date 1710962053535)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: ../raspberry/poetry.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../raspberry/poetry.lock b/../raspberry/poetry.lock
new file mode 100644
--- /dev/null	(date 1711325894380)
+++ b/../raspberry/poetry.lock	(date 1711325894380)
@@ -0,0 +1,118 @@
+# This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.
+
+[[package]]
+name = "future"
+version = "1.0.0"
+description = "Clean single-source support for Python 3 and 2"
+optional = false
+python-versions = ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*"
+files = [
+    {file = "future-1.0.0-py3-none-any.whl", hash = "sha256:929292d34f5872e70396626ef385ec22355a1fae8ad29e1a734c3e43f9fbc216"},
+    {file = "future-1.0.0.tar.gz", hash = "sha256:bd2968309307861edae1458a4f8a4f3598c03be43b97521076aebf5d94c07b05"},
+]
+
+[[package]]
+name = "iso8601"
+version = "2.1.0"
+description = "Simple module to parse ISO 8601 dates"
+optional = false
+python-versions = ">=3.7,<4.0"
+files = [
+    {file = "iso8601-2.1.0-py3-none-any.whl", hash = "sha256:aac4145c4dcb66ad8b648a02830f5e2ff6c24af20f4f482689be402db2429242"},
+    {file = "iso8601-2.1.0.tar.gz", hash = "sha256:6b1d3829ee8921c4301998c909f7829fa9ed3cbdac0d3b16af2d743aed1ba8df"},
+]
+
+[[package]]
+name = "pyserial"
+version = "3.5"
+description = "Python Serial Port Extension"
+optional = false
+python-versions = "*"
+files = [
+    {file = "pyserial-3.5-py2.py3-none-any.whl", hash = "sha256:c4451db6ba391ca6ca299fb3ec7bae67a5c55dde170964c7a14ceefec02f2cf0"},
+    {file = "pyserial-3.5.tar.gz", hash = "sha256:3c77e014170dfffbd816e6ffc205e9842efb10be9f58ec16d3e8675b4925cddb"},
+]
+
+[package.extras]
+cp2110 = ["hidapi"]
+
+[[package]]
+name = "pyyaml"
+version = "6.0.1"
+description = "YAML parser and emitter for Python"
+optional = false
+python-versions = ">=3.6"
+files = [
+    {file = "PyYAML-6.0.1-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:d858aa552c999bc8a8d57426ed01e40bef403cd8ccdd0fc5f6f04a00414cac2a"},
+    {file = "PyYAML-6.0.1-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:fd66fc5d0da6d9815ba2cebeb4205f95818ff4b79c3ebe268e75d961704af52f"},
+    {file = "PyYAML-6.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:69b023b2b4daa7548bcfbd4aa3da05b3a74b772db9e23b982788168117739938"},
+    {file = "PyYAML-6.0.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:81e0b275a9ecc9c0c0c07b4b90ba548307583c125f54d5b6946cfee6360c733d"},
+    {file = "PyYAML-6.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:ba336e390cd8e4d1739f42dfe9bb83a3cc2e80f567d8805e11b46f4a943f5515"},
+    {file = "PyYAML-6.0.1-cp310-cp310-musllinux_1_1_x86_64.whl", hash = "sha256:326c013efe8048858a6d312ddd31d56e468118ad4cdeda36c719bf5bb6192290"},
+    {file = "PyYAML-6.0.1-cp310-cp310-win32.whl", hash = "sha256:bd4af7373a854424dabd882decdc5579653d7868b8fb26dc7d0e99f823aa5924"},
+    {file = "PyYAML-6.0.1-cp310-cp310-win_amd64.whl", hash = "sha256:fd1592b3fdf65fff2ad0004b5e363300ef59ced41c2e6b3a99d4089fa8c5435d"},
+    {file = "PyYAML-6.0.1-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:6965a7bc3cf88e5a1c3bd2e0b5c22f8d677dc88a455344035f03399034eb3007"},
+    {file = "PyYAML-6.0.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:f003ed9ad21d6a4713f0a9b5a7a0a79e08dd0f221aff4525a2be4c346ee60aab"},
+    {file = "PyYAML-6.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:42f8152b8dbc4fe7d96729ec2b99c7097d656dc1213a3229ca5383f973a5ed6d"},
+    {file = "PyYAML-6.0.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc"},
+    {file = "PyYAML-6.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d2b04aac4d386b172d5b9692e2d2da8de7bfb6c387fa4f801fbf6fb2e6ba4673"},
+    {file = "PyYAML-6.0.1-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:e7d73685e87afe9f3b36c799222440d6cf362062f78be1013661b00c5c6f678b"},
+    {file = "PyYAML-6.0.1-cp311-cp311-win32.whl", hash = "sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741"},
+    {file = "PyYAML-6.0.1-cp311-cp311-win_amd64.whl", hash = "sha256:bf07ee2fef7014951eeb99f56f39c9bb4af143d8aa3c21b1677805985307da34"},
+    {file = "PyYAML-6.0.1-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:855fb52b0dc35af121542a76b9a84f8d1cd886ea97c84703eaa6d88e37a2ad28"},
+    {file = "PyYAML-6.0.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:40df9b996c2b73138957fe23a16a4f0ba614f4c0efce1e9406a184b6d07fa3a9"},
+    {file = "PyYAML-6.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a08c6f0fe150303c1c6b71ebcd7213c2858041a7e01975da3a99aed1e7a378ef"},
+    {file = "PyYAML-6.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6c22bec3fbe2524cde73d7ada88f6566758a8f7227bfbf93a408a9d86bcc12a0"},
+    {file = "PyYAML-6.0.1-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:8d4e9c88387b0f5c7d5f281e55304de64cf7f9c0021a3525bd3b1c542da3b0e4"},
+    {file = "PyYAML-6.0.1-cp312-cp312-win32.whl", hash = "sha256:d483d2cdf104e7c9fa60c544d92981f12ad66a457afae824d146093b8c294c54"},
+    {file = "PyYAML-6.0.1-cp312-cp312-win_amd64.whl", hash = "sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df"},
+    {file = "PyYAML-6.0.1-cp36-cp36m-macosx_10_9_x86_64.whl", hash = "sha256:50550eb667afee136e9a77d6dc71ae76a44df8b3e51e41b77f6de2932bfe0f47"},
+    {file = "PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1fe35611261b29bd1de0070f0b2f47cb6ff71fa6595c077e42bd0c419fa27b98"},
+    {file = "PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:704219a11b772aea0d8ecd7058d0082713c3562b4e271b849ad7dc4a5c90c13c"},
+    {file = "PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:afd7e57eddb1a54f0f1a974bc4391af8bcce0b444685d936840f125cf046d5bd"},
+    {file = "PyYAML-6.0.1-cp36-cp36m-win32.whl", hash = "sha256:fca0e3a251908a499833aa292323f32437106001d436eca0e6e7833256674585"},
+    {file = "PyYAML-6.0.1-cp36-cp36m-win_amd64.whl", hash = "sha256:f22ac1c3cac4dbc50079e965eba2c1058622631e526bd9afd45fedd49ba781fa"},
+    {file = "PyYAML-6.0.1-cp37-cp37m-macosx_10_9_x86_64.whl", hash = "sha256:b1275ad35a5d18c62a7220633c913e1b42d44b46ee12554e5fd39c70a243d6a3"},
+    {file = "PyYAML-6.0.1-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:18aeb1bf9a78867dc38b259769503436b7c72f7a1f1f4c93ff9a17de54319b27"},
+    {file = "PyYAML-6.0.1-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:596106435fa6ad000c2991a98fa58eeb8656ef2325d7e158344fb33864ed87e3"},
+    {file = "PyYAML-6.0.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:baa90d3f661d43131ca170712d903e6295d1f7a0f595074f151c0aed377c9b9c"},
+    {file = "PyYAML-6.0.1-cp37-cp37m-win32.whl", hash = "sha256:9046c58c4395dff28dd494285c82ba00b546adfc7ef001486fbf0324bc174fba"},
+    {file = "PyYAML-6.0.1-cp37-cp37m-win_amd64.whl", hash = "sha256:4fb147e7a67ef577a588a0e2c17b6db51dda102c71de36f8549b6816a96e1867"},
+    {file = "PyYAML-6.0.1-cp38-cp38-macosx_10_9_x86_64.whl", hash = "sha256:1d4c7e777c441b20e32f52bd377e0c409713e8bb1386e1099c2415f26e479595"},
+    {file = "PyYAML-6.0.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a0cd17c15d3bb3fa06978b4e8958dcdc6e0174ccea823003a106c7d4d7899ac5"},
+    {file = "PyYAML-6.0.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:28c119d996beec18c05208a8bd78cbe4007878c6dd15091efb73a30e90539696"},
+    {file = "PyYAML-6.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7e07cbde391ba96ab58e532ff4803f79c4129397514e1413a7dc761ccd755735"},
+    {file = "PyYAML-6.0.1-cp38-cp38-musllinux_1_1_x86_64.whl", hash = "sha256:49a183be227561de579b4a36efbb21b3eab9651dd81b1858589f796549873dd6"},
+    {file = "PyYAML-6.0.1-cp38-cp38-win32.whl", hash = "sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206"},
+    {file = "PyYAML-6.0.1-cp38-cp38-win_amd64.whl", hash = "sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62"},
+    {file = "PyYAML-6.0.1-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:9eb6caa9a297fc2c2fb8862bc5370d0303ddba53ba97e71f08023b6cd73d16a8"},
+    {file = "PyYAML-6.0.1-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:c8098ddcc2a85b61647b2590f825f3db38891662cfc2fc776415143f599bb859"},
+    {file = "PyYAML-6.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5773183b6446b2c99bb77e77595dd486303b4faab2b086e7b17bc6bef28865f6"},
+    {file = "PyYAML-6.0.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:b786eecbdf8499b9ca1d697215862083bd6d2a99965554781d0d8d1ad31e13a0"},
+    {file = "PyYAML-6.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bc1bf2925a1ecd43da378f4db9e4f799775d6367bdb94671027b73b393a7c42c"},
+    {file = "PyYAML-6.0.1-cp39-cp39-musllinux_1_1_x86_64.whl", hash = "sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5"},
+    {file = "PyYAML-6.0.1-cp39-cp39-win32.whl", hash = "sha256:faca3bdcf85b2fc05d06ff3fbc1f83e1391b3e724afa3feba7d13eeab355484c"},
+    {file = "PyYAML-6.0.1-cp39-cp39-win_amd64.whl", hash = "sha256:510c9deebc5c0225e8c96813043e62b680ba2f9c50a08d3724c7f28a747d1486"},
+    {file = "PyYAML-6.0.1.tar.gz", hash = "sha256:bfdf460b1736c775f2ba9f6a92bca30bc2095067b8a9d77876d1fad6cc3b4a43"},
+]
+
+[[package]]
+name = "serial"
+version = "0.0.97"
+description = "A framework for serializing/deserializing JSON/YAML/XML into python class instances and vice versa"
+optional = false
+python-versions = "*"
+files = [
+    {file = "serial-0.0.97-py2.py3-none-any.whl", hash = "sha256:e887f06e07e190e39174b694eee6724e3c48bd361be1d97964caef5d5b61c73b"},
+    {file = "serial-0.0.97.tar.gz", hash = "sha256:542150a127ddbf5ed2acc3a6ac4ce807cbcdae3b197acf785bbda6565c94f848"},
+]
+
+[package.dependencies]
+future = ">=0.17.1"
+iso8601 = ">=0.1.12"
+pyyaml = ">=3.13"
+
+[metadata]
+lock-version = "2.0"
+python-versions = "^3.12"
+content-hash = "8777a18acabf2d504bbaaf573adc551577e75b887e3932950a389e341d4ff22c"
Index: ../goit-ds-hw-02-2/fill_db.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../goit-ds-hw-02-2/fill_db.py b/../goit-ds-hw-02-2/fill_db.py
new file mode 100644
--- /dev/null	(date 1711139757488)
+++ b/../goit-ds-hw-02-2/fill_db.py	(date 1711139757488)
@@ -0,0 +1,47 @@
+from pymongo.mongo_client import MongoClient
+from pymongo.server_api import ServerApi
+
+uri = "mongodb+srv://ntnkiev:mdb162263@cluster0.hu7npum.mongodb.net/?retryWrites=true&w=majority"
+
+# Create a new client and connect to the server
+client = MongoClient(uri, server_api=ServerApi('1'))
+
+# Send a ping to confirm a successful connection
+db = client.ds02
+
+try:
+    db.cats.insert_one({
+        "name": 'barsik',
+        "age": 3,
+        "features": ['ходить в капці', 'дає себе гладити', 'рудий'],
+    })
+    print("Successfully added")
+except Exception as e:
+    print(e)
+
+try:
+    db.cats.insert_many([
+        {
+            "name": 'Lama',
+            "age": 2,
+            "features": ['ходить в лоток', 'не дає себе гладити', 'сірий'],
+        },
+        {
+            "name": 'Liza',
+            "age": 4,
+            "features": ['ходить в лоток', 'дає себе гладити', 'білий'],
+        },
+        {
+            "name": 'Boris',
+            "age": 12,
+            "features": ['ходить в лоток', 'не дає себе гладити', 'сірий'],
+        },
+        {
+            "name": 'Murzik',
+            "age": 1,
+            "features": ['ходить в лоток', 'дає себе гладити', 'чорний'],
+        },
+    ])
+    print("Successfully added")
+except Exception as e:
+    print(e)
Index: ../raspberry/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../raspberry/main.py b/../raspberry/main.py
new file mode 100644
--- /dev/null	(date 1711359139944)
+++ b/../raspberry/main.py	(date 1711359139944)
@@ -0,0 +1,71 @@
+import serial
+import serial.tools.list_ports
+
+
+def list_serial_ports():
+    ports = serial.tools.list_ports.comports()
+    print(ports)
+    available_ports = {str(index + 1): port.device for index, port in enumerate(ports)}
+    return available_ports
+
+
+def main():
+    while True:
+        ports = list_serial_ports()
+        if ports:
+            print("Available serial ports:")
+            for index, port in ports.items():
+                print(f"{index}: {port}")
+        else:
+            print("Serial port not found.")
+
+        user_input = input("Enter port number or press 'r' to refresh or 'q' to exit: ")
+        if user_input == "r":
+            pass
+        elif user_input == "q":
+            exit()
+        else:
+            port = ports.get(user_input)
+            if port:
+                with serial.Serial(port, 9600, timeout=1) as ser:
+                    print(f"Port {port} open.")
+                    while True:
+                        data = ser.read()
+                        if data == b'\x16\x05':
+                            ser.write(b'\x11\x1B\x53\x1A\x03\x36\x0A')
+                        elif data == b'\x16\x1B\x53\x30\x31\x30\x31\x30\x31\x30\x31\x6C\x47\x53\x20\x20\x20\x20\x20\x0A':
+                            ser.write(
+                                b"------------------------"b"\x0A\x1B"b"K!.MERKUR GAMING      17.00"b"\x0A\x1B"b"K"
+                                b"'.EXCLUSIVA BONOS"
+                                b"CF1  ES.           CF12 6.58 RC2"b"\x0A\x1B"b"K#.SALA NO.    :   00000000"b"\x0A\x1B"b"K$.MAQUINA NO."
+                                b":   30100945.SERIE NO.   : 6130100945.REGION  "
+                                b"Murcia_Excl_2015.------------------------.ETERNO DATOS:           .       "
+                                b"06.03.24    17:17.       31.05.18    22:14.ULTIMA RECAUDACION:     "b"\x0A\x1B"b"K'."
+                                b" 28.09.23    06:52.------------------------.TOTAL MONEDAS:          "b"\x0A\x1B"b"K"
+                                b".. <"
+                                b"EU >         33623.10.TOTAL BILLETES:         "b"\x0A\x1B"b"Kf. < EU >        "
+                                b"101680.00.MONEDAS INTRODUCIDAS:   "b"\x0A\x1B"b"K.. < EU >        "
+                                b"135303.10.------------------------.TOTAL MONEDAS:          "b"\x0A\x1B"b"K.. < EUR >"
+                                b"  44901.00.TOTAL BILLETTES:        "b"\x0A\x1B"b"Kf. < EUR >            "
+                                b"0.00.TOTAL CANCEL"
+                                b"CREDIT:    "b"\x0A\x1B"b"K.. < EUR >        54584.90.MONEDAS PAGADAS:        "b"\x0A\x1B"b"K.. < EU >"
+                                b"        99485.90.------------------------.BOLSA PREMIOS:          "b"\x0A\x1B"b"K|. "
+                                b"< EUR"
+                                b">            0.00.------------------------.PARTIDAS JUGADAS:       "b"\x0A\x1B"b"Kg."
+                                b"            960607.TOTAL APOSTADO:         . < EUR >       192121.40.TOTAL "
+                                b"PREMIOS:          . < EUR >       156304.00.------------------------.TOTAL "
+                                b"RELLENADO:        "b"\x0A\x1B"b"K.. < EUR >         "
+                                b"2373.00.------------------------.VJP"
+                                b"COUNT:        881825..                       ..DATA NOT CLEARED..     .ENDE   "
+                                b" NL.......")
+                        else:
+                            pass
+                        # rfranco.rf_poll(ser)
+                        # ser.close()
+            else:
+                print("Illegal port number.")
+        # data = ser.readline()
+
+
+if __name__ == '__main__':
+    main()
Index: ../raspberry/raspberry_copy.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../raspberry/raspberry_copy.bat b/../raspberry/raspberry_copy.bat
new file mode 100644
--- /dev/null	(date 1711325060098)
+++ b/../raspberry/raspberry_copy.bat	(date 1711325060098)
@@ -0,0 +1,2 @@
+scp C:\SynologyDrive\Python\Repository\raspberry\*.* ntn@raspberrypi:/home/ntn/python_lab
+
Index: ../goit-ds-hw-02/seed.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from faker import Faker\r\nimport psycopg2\r\nimport random\r\nfrom connect import connection_parameters\r\n\r\n# Налаштування Faker для генерації даних\r\nfake = Faker()\r\n\r\n# Підключення до бази даних\r\nconn = psycopg2.connect(**connection_parameters)\r\ncur = conn.cursor()\r\n\r\n# заповнення таблиці status\r\ncur.execute(\"INSERT INTO status (id, name) VALUES (1, 'new'), (2, 'in progress'), (3, 'completed');\")\r\n\r\n# генерація даних для таблиці users\r\nfor i in range(100):  # Заповнення користувачів\r\n    fullname = fake.name()\r\n    email = fake.unique.email()\r\n    cur.execute(\"INSERT INTO users (fullname, email) VALUES (%s, %s)\", (fullname, email))\r\n\r\n# генерація даних для таблиці tasks\r\ncur.execute(\"SELECT id FROM users\")\r\nusers_ids = cur.fetchall()\r\ncur.execute(\"SELECT id FROM status\")\r\nstatus_ids = cur.fetchall()\r\n\r\nfor i in range(200):  # Заповнення завдань\r\n    title = fake.sentence(nb_words=6)\r\n    description = fake.text()\r\n    status_id = random.choice(status_ids)[0]\r\n    user_id = random.choice(users_ids)[0]\r\n    cur.execute(\"INSERT INTO tasks (title, description, status_id, user_id) VALUES (%s, %s, %s, %s)\",\r\n                (title, description, status_id, user_id))\r\n\r\n# Збереження змін та закриття з'єднання\r\nconn.commit()\r\ncur.close()\r\nconn.close()\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../goit-ds-hw-02/seed.py b/../goit-ds-hw-02/seed.py
--- a/../goit-ds-hw-02/seed.py	(revision 2dc06ada290c509dca899f5e54b63eb326358502)
+++ b/../goit-ds-hw-02/seed.py	(date 1710938091584)
@@ -26,7 +26,7 @@
 status_ids = cur.fetchall()
 
 for i in range(200):  # Заповнення завдань
-    title = fake.sentence(nb_words=6)
+    title = fake.sentence(nb_words=2)
     description = fake.text()
     status_id = random.choice(status_ids)[0]
     user_id = random.choice(users_ids)[0]
@@ -37,7 +37,3 @@
 conn.commit()
 cur.close()
 conn.close()
-
-
-
-
Index: ../goit-ds-hw-02/select.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from psycopg2 import Error\r\nimport psycopg2\r\nfrom connect import connection_parameters\r\n\r\n\r\ndef select_projects(con):\r\n    \"\"\"\r\n    Query all rows in the tasks table\r\n    :param con: the Connection object\r\n    :return: rows projects\r\n    \"\"\"\r\n    rows = None\r\n    cur = con.cursor()\r\n    try:\r\n        cur.execute(\"SELECT * FROM users;\")\r\n        rows = cur.fetchall()\r\n    except Error as e:\r\n        print(e)\r\n    finally:\r\n        cur.close()\r\n    return rows\r\n\r\n\r\ndef select_all_tasks(con):\r\n    \"\"\"\r\n    Query all rows in the tasks table\r\n    :param con: the Connection object\r\n    :return: rows tasks\r\n    \"\"\"\r\n    rows = None\r\n    cur = con.cursor()\r\n    try:\r\n        cur.execute(\"SELECT * FROM tasks\")\r\n        rows = cur.fetchall()\r\n    except Error as e:\r\n        print(e)\r\n    finally:\r\n        cur.close()\r\n    return rows\r\n\r\n\r\ndef select_task_by_status(con, status):\r\n    \"\"\"\r\n    Query tasks by priority\r\n    :param con: the Connection object\r\n    :param status:\r\n    :return: rows tasks\r\n    \"\"\"\r\n    rows = None\r\n    cur = con.cursor()\r\n    try:\r\n        cur.execute(\"SELECT * FROM tasks WHERE status_id IN (SELECT id FROM status WHERE name = 'new')\")\r\n        rows = cur.fetchall()\r\n    except Error as e:\r\n        print(e)\r\n    finally:\r\n        cur.close()\r\n    return rows\r\n\r\n\r\nif __name__ == '__main__':\r\n    with psycopg2.connect(**connection_parameters) as conn:\r\n        print(\"Users:\")\r\n        projects = select_projects(conn)\r\n        print(projects)\r\n        print(\"Tasks\")\r\n        tasks = select_all_tasks(conn)\r\n        print(tasks)\r\n        print(\"Tasks by status:\")\r\n        task_by_priority = select_task_by_status(conn, 'new')\r\n        print(task_by_priority)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../goit-ds-hw-02/select.py b/../goit-ds-hw-02/select.py
--- a/../goit-ds-hw-02/select.py	(revision 2dc06ada290c509dca899f5e54b63eb326358502)
+++ b/../goit-ds-hw-02/select.py	(date 1711137480452)
@@ -3,34 +3,11 @@
 from connect import connection_parameters
 
 
-def select_projects(con):
-    """
-    Query all rows in the tasks table
-    :param con: the Connection object
-    :return: rows projects
-    """
-    rows = None
-    cur = con.cursor()
-    try:
-        cur.execute("SELECT * FROM users;")
-        rows = cur.fetchall()
-    except Error as e:
-        print(e)
-    finally:
-        cur.close()
-    return rows
-
-
-def select_all_tasks(con):
-    """
-    Query all rows in the tasks table
-    :param con: the Connection object
-    :return: rows tasks
-    """
+def sql_request(con, req):
     rows = None
     cur = con.cursor()
     try:
-        cur.execute("SELECT * FROM tasks")
+        cur.execute(req)
         rows = cur.fetchall()
     except Error as e:
         print(e)
@@ -39,33 +16,116 @@
     return rows
 
 
-def select_task_by_status(con, status):
-    """
-    Query tasks by priority
-    :param con: the Connection object
-    :param status:
-    :return: rows tasks
-    """
-    rows = None
+def sql_update(con, req):
     cur = con.cursor()
     try:
-        cur.execute("SELECT * FROM tasks WHERE status_id IN (SELECT id FROM status WHERE name = 'new')")
-        rows = cur.fetchall()
+        cur.execute(req)
     except Error as e:
         print(e)
     finally:
+        con.commit()
         cur.close()
-    return rows
 
 
 if __name__ == '__main__':
     with psycopg2.connect(**connection_parameters) as conn:
-        print("Users:")
-        projects = select_projects(conn)
-        print(projects)
-        print("Tasks")
-        tasks = select_all_tasks(conn)
-        print(tasks)
-        print("Tasks by status:")
-        task_by_priority = select_task_by_status(conn, 'new')
-        print(task_by_priority)
+        # Отримати всі завдання певного користувача.
+        print("Tasks by user")
+        name = input("Enter full user name: ")
+        request = f"SELECT * FROM tasks WHERE user_id IN (SELECT id FROM users WHERE fullname = '{name}')"
+        print(sql_request(conn, request))
+
+        # Вибрати завдання за певним статусом.
+        print("Tasks by status")
+        status = input("Enter status: ")
+        request = f"SELECT * FROM tasks WHERE status_id IN (SELECT id FROM status WHERE name = '{status}')"
+        print(sql_request(conn, request))
+
+        # Оновити статус конкретного завдання.
+        print("Change task status")
+        task = input("Enter task title: ")
+        status = input("Enter task status: ")
+        request = f"""UPDATE tasks SET status_id =
+                  (SELECT id FROM status WHERE name = '{status}')
+                  WHERE title = '{task}';"""
+        sql_update(conn, request)
+        print("Task status updated")
+
+        # Отримати список користувачів, які не мають жодного завдання.
+        print("Users free of tasks")
+        request = "SELECT * FROM users WHERE id NOT IN (SELECT user_id FROM tasks)"
+        print(sql_request(conn, request))
+
+        # Додати нове завдання для конкретного користувача.
+        print("Adding new task")
+        task = input("Enter task title: ")
+        name = input("Enter full user name: ")
+        request = f"""INSERT INTO tasks (title, description, status_id, user_id)
+                    VALUES ('{task}', 'New Task', 1, 
+                    (SELECT id FROM users WHERE fullname = '{name}'));"""
+        sql_update(conn, request)
+        print("Task updated.")
+
+        # Отримати всі завдання, які ще не завершено.
+        print("All unfinished tasks")
+        request = "SELECT * FROM tasks WHERE status_id = (SELECT id FROM status WHERE name = 'completed')"
+        print(sql_request(conn, request))
+
+        # Видалити конкретне завдання.
+        print("Delete task by id")
+        task = input('Enter task id: ')
+        request = f"DELETE FROM tasks WHERE id = {task}"
+        sql_update(conn, request)
+        print(f"Task '{task}' successfully deleted")
+
+        # Знайти користувачів з певною електронною поштою.
+        print("Search user by e-mail")
+        email = input('Enter e-mail pattern: ')
+        request = f"SELECT * FROM users WHERE email LIKE '%{email}%'"
+        print(sql_request(conn, request))
+
+        # Оновити ім'я користувача.
+        print("User name update")
+        old_name = input('Enter full name: ')
+        new_name = input('Enter new full name: ')
+        request = f"UPDATE users SET fullname = '{new_name}' WHERE fullname = '{old_name}'"
+        sql_update(conn, request)
+        print(f"New name: {new_name}")
+
+        # Отримати кількість завдань для кожного статусу.
+        print("Count by status")
+        request = ("""SELECT COUNT(status_id) as task_count, status_id
+                   FROM tasks
+                   GROUP BY status_id;""")
+        print(sql_request(conn, request))
+
+        # Отримати завдання, які призначені користувачам з певною доменною частиною електронної пошти.
+        print("Tasks for users with email domain @example.com")
+        request = ("""SELECT tasks.*
+                   FROM tasks
+                   JOIN users ON tasks.user_id = users.id
+                   WHERE users.email LIKE '%@example.com';""")
+        print(sql_request(conn, request))
+
+        # Отримати список завдань, що не мають опису.
+        print("Tasks that have no description")
+        request = "SELECT * FROM tasks WHERE description IS NULL OR description = '';"
+        print(sql_request(conn, request))
+
+        # Вибрати користувачів та їхні завдання, які є у статусі 'in progress'.
+        print("List of users and tasks with status 'in progress'")
+        request = ("""SELECT users.fullname, tasks.title
+                   FROM users
+                   JOIN tasks ON users.id = tasks.user_id
+                   JOIN status ON tasks.status_id = status.id
+                   WHERE status.name = 'in progress';""")
+        print(sql_request(conn, request))
+
+        # Отримати користувачів та кількість їхніх завдань.
+        print("Users and number of tasks")
+        request = ("""SELECT users.fullname, COUNT(*)
+                   FROM users
+                   LEFT JOIN tasks ON tasks.user_id = users.id
+                   GROUP BY users.fullname""")
+        print(sql_request(conn, request))
+
